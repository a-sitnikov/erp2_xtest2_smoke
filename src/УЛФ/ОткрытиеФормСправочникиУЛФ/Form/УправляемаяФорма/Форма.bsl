&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ТестируемаяФорма;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("лфВидОценки");
	Массив.Добавить("лфВидыНарушений");
	Массив.Добавить("лфВыдела");
	Массив.Добавить("лфЛеснойФонд");
	Массив.Добавить("лфЛесосеки");
	Массив.Добавить("лфПериодыРубки");
	Массив.Добавить("лфПороды");
	Массив.Добавить("лфСпособыРубки");
	Массив.Добавить("лфТехнологииЛесозаготовок");
	Массив.Добавить("лфХозяйства");
	Массив.Добавить("лфЦелевыеНазначенияЛесов");
	
	Для каждого Имя из Массив Цикл
		
		НаборТестов.НачатьГруппу(Имя);
		НаборТестов.Добавить("ОткрытьФормуСписка", НаборТестов.ПараметрыТеста(Имя), Имя + "_ОткрытьФормуСписка");
		
		ПараметрыМетаданных = ПолучитьПараметрыСправочника(Имя);
		
		НаборТестов.Добавить("ОткрытьФормуЭлементаНовый", НаборТестов.ПараметрыТеста(Имя), Имя + "_ОткрытьФормуЭлемента_Новый");
		НаборТестов.Добавить("ОткрытьФормуЭлементаСуществующий", НаборТестов.ПараметрыТеста(Имя, ПараметрыМетаданных.Иерархический), Имя + "_ОткрытьФормуЭлемента_Существующий");
			
		Если ПараметрыМетаданных.Иерархический Тогда
			
			НаборТестов.Добавить("ОткрытьФормГруппыНовый",    НаборТестов.ПараметрыТеста(Имя), Имя + "_ОткрытьФормуГруппы_Новый");
			НаборТестов.Добавить("ОткрытьФормГруппыСуществующий",    НаборТестов.ПараметрыТеста(Имя), Имя + "_ОткрытьФормуГруппы_Существующий");
			
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	ЗакрытьФорму();
	
КонецПроцедуры

// } интерфейс тестирования

//{ блок юнит-тестов - САМИ ТЕСТЫ

&НаКлиенте
Процедура ЗакрытьФорму()
	//Если ТипЗнч(ТестируемаяФорма) <> Тип("Форма") и ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
	Если ТипЗнч(ТестируемаяФорма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли; 
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие("ПередЗакрытием", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие("ПриЗакрытии", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка; 			
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = "";

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыСправочника(Имя)
	
	Параметры = Новый Структура;
	
	Если Метаданные.Справочники[Имя].Иерархический
		И Метаданные.Справочники[Имя].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Параметры.Вставить("Иерархический", Истина);
		
	Иначе
		Параметры.Вставить("Иерархический", Ложь);
	КонецЕсли;	
	
	Возврат Параметры;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьЭлементСправочника(Имя, Параметры = Неопределено)
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	Справочник." + Имя + " КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|{ГДЕ
	|	Спр.Ссылка.* КАК Ссылка}";
	
	Если Параметры <> Неопределено Тогда
		
		Для каждого КлючИЗначение из Параметры Цикл
			
			ЭлементОтбора = Запрос.Отбор.Добавить("Ссылка." + КлючИЗначение.Ключ);
			ЭлементОтбора.Установить(КлючИЗначение.Значение, Истина);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	Если Запрос.Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Запрос.Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуСписка(Имя) Экспорт
	
	ТестируемаяФорма = ОткрытьФорму("Справочник." + Имя + ".ФормаСписка");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуЭлементаНовый(Имя) Экспорт
	
	ТестируемаяФорма = ОткрытьФорму("Справочник." + Имя + ".ФормаОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭлементаСуществующий(Имя, Иерархический) Экспорт
	
	Если Иерархический Тогда
		СтруктураПараметров = Новый Структура("ЭтоГруппа", Ложь);
	Иначе
		СтруктураПараметров = Неопределено;
	КонецЕсли;	
	
	Ссылка = ПолучитьЭлементСправочника(Имя, СтруктураПараметров);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Ссылка);
	
	ТестируемаяФорма = ОткрытьФорму("Справочник." + Имя + ".ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормГруппыНовый(Имя) Экспорт
	
	ТестируемаяФорма = ОткрытьФорму("Справочник." + Имя + ".ФормаГруппы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормГруппыСуществующий(Имя) Экспорт
	
	СтруктураПараметров = Новый Структура("ЭтоГруппа", Истина);
	
	Ссылка = ПолучитьЭлементСправочника(Имя, СтруктураПараметров);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Ссылка);
	
	ТестируемаяФорма = ОткрытьФорму("Справочник." + Имя + ".ФормаГруппы", ПараметрыФормы);
	
КонецПроцедуры

