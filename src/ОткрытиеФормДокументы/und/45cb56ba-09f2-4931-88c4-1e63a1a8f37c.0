{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

&НаКлиенте
Перем ТестируемаяФорма;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	Массив = ПолучитьМассивОбъектов();
	
	Для каждого Имя из Массив Цикл
		
		НаборТестов.НачатьГруппу(Имя);
		НаборТестов.Добавить(""ОткрытьФормуСписка"", НаборТестов.ПараметрыТеста(Имя), Имя + ""_ОткрытьФормуСписка"");
		
		НаборТестов.Добавить(""ОткрытьФормуЭлементаНовый"", НаборТестов.ПараметрыТеста(Имя), Имя + ""_ОткрытьФормуЭлемента_Новый"");
		НаборТестов.Добавить(""ОткрытьФормуЭлементаСуществующий"", НаборТестов.ПараметрыТеста(Имя), Имя + ""_ОткрытьФормуЭлемента_Существующий"");
			
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивОбъектов()
	
	Массив = Новый Массив;
	Для каждого ОбъектМетаданных из Метаданные.Документы Цикл
		
		Если Найти(ОбъектМетаданных.Имя, ""Удалить"") = 1 Тогда
			Продолжить;
		КонецЕсли;	
		
		Массив.Добавить(ОбъектМетаданных.Имя);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	ЗакрытьФорму();
	
КонецПроцедуры

// } интерфейс тестирования

//{ блок юнит-тестов - САМИ ТЕСТЫ

&НаКлиенте
Процедура ЗакрытьФорму()
	//Если ТипЗнч(ТестируемаяФорма) <> Тип(""Форма"") и ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
	Если ТипЗнч(ТестируемаяФорма) <> Тип(""УправляемаяФорма"") Тогда
		Возврат;
	КонецЕсли; 
	ТестируемаяФорма.Модифицированность = Ложь;
	Если ТестируемаяФорма.Открыта() Тогда
		ТестируемаяФорма.Модифицированность = Ложь;
		//Попытка
			ТестируемаяФорма.Закрыть();
		//Исключение
		//	Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//	ЗакрытьФормуБезусловноСОтменойТранзакции(ТестируемаяФорма);
		//	//Если ТранзакцияАктивна() Тогда
		//	//	ОтменитьТранзакцию();
		//	//КонецЕсли;
		//	//	//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
		//	//НачатьТранзакцию();
		//	//ТестируемаяФорма.УстановитьДействие(""ПередЗакрытием"", Неопределено);
		//	//ТестируемаяФорма.УстановитьДействие(""ПриЗакрытии"", Неопределено);
		//	//ТестируемаяФорма.Закрыть();
		//	ВызватьИсключение Ошибка; 			
		//КонецПопытки;
	Иначе
		Попытка
			ТестируемаяФорма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	ТестируемаяФорма = """";

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭлементДокумента(Имя, Параметры = Неопределено)
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Текст =
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	Документ."" + Имя + "" КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|{ГДЕ
	|	Спр.Ссылка.* КАК Ссылка,
	|	Спр.Проведен}
	|УПОРЯДОЧИТЬ ПО
	|	Спр.Дата УБЫВ"";
	
	Если Параметры <> Неопределено Тогда
		
		Для каждого КлючИЗначение из Параметры Цикл
			ЭлементОтбора = Запрос.Отбор.Добавить(КлючИЗначение.Ключ);
			ЭлементОтбора.Установить(КлючИЗначение.Значение, Истина);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	Если Запрос.Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Запрос.Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуСписка(Имя) Экспорт
	
	ТестируемаяФорма = ОткрытьФорму(""Документ."" + Имя + "".ФормаСписка"");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуЭлементаНовый(Имя) Экспорт
	
	ТестируемаяФорма = ОткрытьФорму(""Документ."" + Имя + "".ФормаОбъекта"");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЭлементаСуществующий(Имя) Экспорт
	
	Ссылка = ПолучитьЭлементДокумента(Имя, Новый Структура(""Проведен"", Истина));
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить(""Ключ"", Ссылка);
	
		ТестируемаяФорма = ОткрытьФорму(""Документ."" + Имя + "".ФормаОбъекта"", ПараметрыФормы);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить(""РежимЗаписи"", РежимЗаписиДокумента.Проведение);
		
		ТестируемаяФорма.Записать(ПараметрыЗаписи);
		
	КонецЕсли;	
	
КонецПроцедуры

",
{4,3,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",d7763d54-e3e8-4427-b006-786d44023817}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"CоздаваемыйЭлемент",
{1,1,
{"ru","Cоздаваемый элемент"}
},
{"Pattern",
{"#",280f5f0e-9c8a-49cc-bf6d-4d296cc17a63}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"НужноИсключениеЕслиНеНайденоДокументов",
{1,1,
{"ru","Нужно исключение если не найдено документов"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}